"""
Django settings for logsinout project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from django.contrib.messages import constants as messages
from datetime import timedelta
from django.conf import settings
from datetime import datetime
import base64

#TWILIO
from dotenv import load_dotenv

dotenv_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'jik.env')
load_dotenv(dotenv_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

DBP = os.getenv("DBP")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
#to give port 8000 access and also all ports
"""
netsh advfirewall firewall add rule name="Allow Django 8000" protocol=TCP dir=in localport=8000 action=allow
"""

CSRF_TRUSTED_ORIGINS = [
    "https://4eaf-197-232-12-20.ngrok-free.app"
]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'loging.apps.LogingConfig',
    'useraccess.apps.UseraccessConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'logsinout.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'loging.context_processors.active_logo',
                'loging.context_processors.user_profile_picture',
                'loging.context_processors.messages_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'logsinout.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME':  'proj1oo',
        'USER': 'root',
        'PASSWORD': DBP,
        'PORT': '3306', 
        'HOST': '127.0.0.1'
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# These are files that don’t change often (e.g., CSS, JS) and are part of your app.
STATIC_URL = 'static/'  # URL to access static files (e.g., http://localhost:8000/static/)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Additional static files directory (for development)
]
# Note: In production, you'll also need to configure STATIC_ROOT and collectstatic

# Media files (user-uploaded content like profile pictures, logos, etc.)
# These are files uploaded by users via the admin panel or application forms.
MEDIA_URL = '/media/'  # URL prefix to access media files in browser (e.g., http://localhost:8000/media/)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')  # Absolute file system path to store uploaded media

# ✅ CORRECTIONS MADE:
# 1. MEDIA_URL was missing – this caused the "Empty static prefix not permitted" error.
# 2. You had two MEDIA_ROOT lines – one was incorrect (`'/media/'`) and was removed.
# 3. Added helpful comments so you or future developers understand each setting.


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MESSAGES_TAGS = {
    messages.ERROR:'danger'
}

dotenv_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'jik.env')
load_dotenv(dotenv_path)

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Example: smtp.gmail.com
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'brinsicmichael7@gmail.com'
EMAIL_HOST_PASSWORD = os.getenv("PASSKEY")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER



# Base URL for generating the reset link
BASE_URL = 'http://localhost:8000'  # Update with the correct base URL (or domain)


AUTH_USER_MODEL = 'useraccess.CustomerUser'
LOGIN_URL = '/auth_access/signin/'

SIMPLE_JWT = {
    "ACCESS_TOKEN": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": settings.SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",


}

####TWILIO CODE
# Load your custom environment file


TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_WHATSAPP_FROM = os.getenv("TWILIO_WHATSAPP_FROM")


# M-Pesa Configuration (for Local Development using Sandbox)
timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
MPESA_CONSUMER_KEY = os.getenv("MPESA_CONSUMER_KEY")  # Your API key from Safaricom
MPESA_CONSUMER_SECRET = os.getenv("MPESA_CONSUMER_SECRET")  # Your API secret from Safaricom

MPESA_LIPA_NA_MPESA_SHORTCODE = os.getenv("MPESA_LIPA_NA_MPESA_SHORTCODE")  # Shortcode provided by Safaricom (used for Paybill or Buy Goods)
MPESA_LIPA_NA_MPESA_API_KEY = os.getenv("MPESA_LIPA_NA_MPESA_API_KEY")  # The API key provided by Safaricom 'passkey'
MPESA_LIPA_NA_MPESA_API_SECRET = base64.b64encode((MPESA_LIPA_NA_MPESA_SHORTCODE + MPESA_LIPA_NA_MPESA_API_KEY + timestamp).encode()).decode()  # The API secret provided by Safaricom
MPESA_LIPA_NA_MPESA_PASSWORD = MPESA_LIPA_NA_MPESA_API_SECRET  # The password for your Lipa Na M-Pesa account (also provided by Safaricom)

# Callback URL (ensure this is correct for your local development)
MPESA_CALLBACK_URL = 'http://localhost:8000/mpesa/callback/'  # Use localhost for local testing

# M-Pesa URLs (for testing, use sandbox URLs)
MPESA_API_URL_SANDBOX = 'https://sandbox.safaricom.co.ke'
MPESA_API_URL = MPESA_API_URL_SANDBOX  # Using sandbox API URL for local testing

# Access Token URL
MPESA_ACCESS_TOKEN_URL = '/oauth/v1/generate?grant_type=client_credentials'

# Lipa Na M-Pesa STK Push URL (sandbox URL for local development)
MPESA_STK_PUSH_URL = '/mpesa/stkpush/v1/processrequest'

# Shortcode for Lipa Na M-Pesa (use the one provided in the Safaricom Developer portal for sandbox testing)
MPESA_SHORTCODE = MPESA_LIPA_NA_MPESA_SHORTCODE  # Replace with the sandbox shortcode provided by Safaricom

# Other optional settings for M-Pesa:
MPESA_LIPA_NA_MPESA_PHONE = os.getenv("MPESA_LIPA_NA_MPESA_PHONE")  # Your M-Pesa phone number that will receive payments